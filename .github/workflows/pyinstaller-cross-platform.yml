name: Cross-platform executable
run-name: PyInstaller by @${{ github.actor }}

on:
  workflow_dispatch:
  push:
    branches:
      - main
    tags:
      - 'v*.*.*'

permissions:
  contents: write
  packages: write
  issues: write
  pull-requests: write
  deployments: write

defaults:
  run:
    shell: bash

jobs:
  envs:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set env
        id: set-env
        run: |
          if [[ "${{ github.ref }}" == "refs/tags/v"* ]]; then
            echo "REF=${{ github.ref }}" >> $GITHUB_ENV
            echo "VER=`expr match $ref 'v\([0-9]*\.[0-9]*\.[0-9]*\)'`" >> $GITHUB_ENV
            echo "TAG=`expr match $ref 'v[0-9]*_[0-9]*_[0-9]*'`" >> $GITHUB_ENV
          else
              echo "REF=${{ github.ref }}" >> $GITHUB_ENV
              echo "VER=$(date +'%Y-%m-%d')" >> $GITHUB_ENV
              echo "TAG=latest" >> $GITHUB_ENV
          fi
          
          echo $VER
          echo $TAG
          echo $REF
    outputs:
        ver: ${{ env.VER }}
        tag: ${{ env.TAG }}
        ref: ${{ env.REF }}

  delete-if-exists:
    if: curl -s -o /dev/null -w "%{http_code}" https://api.github.com/repos/liudonghua123/pellipop/releases/tags/${{ needs.envs.outputs.tag }} | grep -q 200
    runs-on: ubuntu-latest
    needs:
      - envs
    steps:
      - name: Delete release
        uses: liudonghua123/delete-release-action@v1
        with:
          release_name: ${{ needs.envs.outputs.ver }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  check:
    runs-on: ubuntu-latest
    needs:
      - envs

    steps:
      - name: Verify
        run: |
          echo "VER=${{ needs.envs.outputs.ver }}"
          echo "TAG=${{ needs.envs.outputs.tag }}"
          echo "REF=${{ needs.envs.outputs.ref }}"
          

  build:
    name: Build release binaries

    strategy:
      fail-fast: false
      matrix:
        os:
          - macos-latest
          - ubuntu-latest
          - windows-latest

    needs:
      - envs

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller

      - name: Install pellipop
        run: |
          pip install .

      - name: Fix linux msgcat
        run: |
          if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
            sudo apt-get install gettext
            sudo ln -s /usr/bin/msgcat /usr/local/bin/msgcat
            cp ./linux-fix/msgcat.py /opt/hostedtoolcache/Python/3.12.1/x64/lib/python3.12/site-packages/ttkbootstrap/localization/msgcat.py
          
          
          fi

      - name: Build with pyinstaller
        run: |
          ls pellipop

          pyinstaller pellipop/gui.py \
          --onefile \
          --name=pellipop-${{ matrix.os }}-${{ needs.envs.outputs.ver }} \
          --hidden-import='PIL._tkinter_finder' \
          --windowed 

#      - name: Fake build
#        run: |
#          mkdir -p ./dist
#          echo "Fake build for ${{ matrix.os }}" > ./dist/pellipop-${{ matrix.os }}-${{ needs.envs.outputs.ver }}
        

      - name: Deploy artifacts
        uses: actions/upload-artifact@v4
        with:
          name: pellipop-${{ matrix.os }}
          path: ./dist/pellipop-${{ matrix.os }}*
          if-no-files-found: error

  release:
    if: '!cancelled()'
    needs:
      - build
      - envs

    name: Release binaries
    runs-on: ubuntu-latest
    steps:
      -  name: Download binaries
         uses: actions/download-artifact@v4
         with:
           merge-multiple: true
           path: ./dist

      - name: release
        uses: softprops/action-gh-release@v1
        with:
          name: ${{ needs.envs.outputs.ver }}
          tag_name: ${{ needs.envs.outputs.tag }}
          body: |
              Pellipop release for commit ${{ github.sha }}
          draft: ${{ needs.envs.outputs.tag != 'latest' }}
          prerelease: ${{ needs.envs.outputs.tag != 'latest' }}
          files: |
              ./dist/*
#          files: |
#              ./dist/pellipop-ubuntu-latest-${{ needs.envs.outputs.ver }}
#              ./dist/pellipop-macos-latest-${{ needs.envs.outputs.ver }}
#              ./dist/pellipop-windows-latest-${{ needs.envs.outputs.ver }}.exe

