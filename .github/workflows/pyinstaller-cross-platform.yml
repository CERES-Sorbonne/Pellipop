name: Cross-platform executable
run-name: PyInstaller by @${{ github.actor }}

on:
  workflow_dispatch:
  push:
    branches:
      - main
    tags:
      - 'v*.*.*'
      - 'v*.*'

permissions:
  contents: write
  packages: write

defaults:
  run:
    shell: bash # Use bash shell for every os

jobs:

  get-ref:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get current branch
        id: check_step
        run: |
          raw=$(git branch -r --contains ${{ github.ref }})
          if [[ -z "$raw" ]]; then
            raw=$(git branch -r --contains ${{ github.sha }})
          fi
          if [[ -z "$raw" ]]; then
            echo "No branch found for ${{ github.ref }} or ${{ github.sha }}."
            echo "This is probably a tag push without the associated commit pushed as well."
            exit 1
          fi
          BRANCH=${raw##*/}
          BRANCH=$(echo $BRANCH | base64 -w 0)
          echo "BRANCH=$BRANCH" >> $GITHUB_OUTPUT
          echo "Branch is $BRANCH."
    outputs:
      branch-name: ${{ steps.check_step.outputs.BRANCH }}

  envs:
    runs-on: ubuntu-latest
    needs: get-ref
    steps:
      - name: Decode ref
        id: decode_ref
        run: |
          name=${{ needs.get-ref.outputs.branch-name }}
          name=$(echo $name | base64 -d)
          echo "NAME=$name" >> $GITHUB_ENV

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
            ref: ${{ env.NAME }}
            fetch-depth: 0

      - name: Set env
        id: set-env
        run: |
          if [[ "${{ github.event_name }}" == "push" ]]; then
            TAG=$(echo $GITHUB_REF | cut -d / -f 3)
            echo "TAG=$TAG" >> $GITHUB_ENV
            echo "VER=$TAG" >> $GITHUB_ENV
            TAG_MESSAGE=$(git tag -l --format='%(contents)' $TAG | sed 's/ *$//g' | sed '/^[[:space:]]*$/d' | base64 -w 0)
          else
              echo "VER=$(date +'%Y-%m-%d')" >> $GITHUB_ENV
              echo "TAG=$(date +'%Y-%m-%d')" >> $GITHUB_ENV
              TAG_MESSAGE=(echo "" | base64 -w 0)
          fi
          echo "REF=${{ needs.get-ref.outputs.branch-name }}" >> $GITHUB_ENV
          echo "DATE=$(date +'%Y-%m-%d')" >> $GITHUB_ENV
          echo "TAG_MESSAGE=$TAG_MESSAGE" >> $GITHUB_ENV
          
          MESSAGE=$(git show -s --format=%s | base64 -w 0)
          echo "MESSAGE=$MESSAGE" >> $GITHUB_ENV
    
          user=$(git show -s --format=%an | base64 -w 0)
          echo "USER=$user" >> $GITHUB_ENV
          email=$(git show -s --format=%ae | base64 -w 0)
          echo "EMAIL=$email" >> $GITHUB_ENV

    outputs:
      ver: ${{ env.VER }}
      tag: ${{ env.TAG }}
      ref: ${{ env.REF }}
      date: ${{ env.DATE }}
      message: ${{ env.MESSAGE }}
      user: ${{ env.USER }}
      email: ${{ env.EMAIL }}
      tag_message: ${{ env.TAG_MESSAGE }}


  delete-if-exists:
    runs-on: ubuntu-latest
    needs:
      - envs
    steps:
      - name: Delete
        run: |
          curl_res=$(curl -s -o /dev/null -w "%{http_code}" https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ needs.envs.outputs.date }})
          echo $curl_res
          if [[ $curl_res -eq 200 ]]; then
              echo "delete=true" >> $GITHUB_ENV
          else
              echo "delete=false" >> $GITHUB_ENV
          fi

      - name: Delete release
        uses: dev-drprasad/delete-tag-and-release@v1.0
        with:
          tag_name: ${{ needs.envs.outputs.tag }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
          delete_release: ${{ env.delete }}


  check:
    runs-on: ubuntu-latest
    needs:
      - envs
    steps:
      - name: Verify
        run: |
          echo "VER=${{ needs.envs.outputs.ver }}"
          echo "TAG=${{ needs.envs.outputs.tag }}"
          echo "REF=${{ needs.envs.outputs.ref }}"
          echo "DATE=${{ needs.envs.outputs.date }}"
          
          name=${{ needs.envs.outputs.ref }}
          name=$(echo $name | base64 -d)
          echo "Decoded ref is $name" 
          
          MESSAGE=${{ needs.envs.outputs.message }}
          MESSAGE=$(echo $MESSAGE | base64 -d)
          echo "Decoded message is $MESSAGE"
          
          TAG_MESSAGE=${{ needs.envs.outputs.tag_message }}
          TAG_MESSAGE=$(echo $TAG_MESSAGE | base64 -d)
          echo "Decoded tag message is $TAG_MESSAGE"
          
            
  

  build:
    name: Build release binaries
    strategy:
      fail-fast: false
      matrix:
        os:
          - macos-latest
          - macos-14
          - ubuntu-latest
          - windows-latest
    needs:
      - envs
    runs-on: ${{ matrix.os }}
    steps:
      - name: Decode ref
        id: decode_ref
        run: |
          name=${{ needs.envs.outputs.ref }}
          name=$(echo $name | base64 -d)
          echo "REF=$name" >> $GITHUB_ENV

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
            ref: ${{ env.REF }}

      - name: Create short os name
        id: os
        run: |
          if [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            OS=mac
          elif [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
            OS=linux
          elif [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            OS=win
          elif [[ "${{ matrix.os }}" == "macos-14" ]]; then
            OS=mac-M1
          fi
            echo "OS=$OS" >> $GITHUB_ENV

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller

      - name: Install pellipop
        run: |
          pip install .

      - name: Fix linux msgcat
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get install gettext
          sudo ln -s /usr/bin/msgcat /usr/local/bin/msgcat
          cp ./linux-fix/msgcat.py /opt/hostedtoolcache/Python/3.12.1/x64/lib/python3.12/site-packages/ttkbootstrap/localization/msgcat.py 

      - name: UPX
        if : matrix.os == 'windows-latest' # UPX is only available on Windows for now
        run: |
            if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
                choco install upx
                upx --version
                echo "UPX_PATH=/tools/upx/upx.exe" >> $GITHUB_ENV
            elif [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
                sudo apt-get install upx
                upx --version
                echo "UPX_PATH=/usr/bin/upx" >> $GITHUB_ENV
            elif [[ "${{ matrix.os }}" == "macos-latest" || "${{ matrix.os }}" == "macos-14" ]]; then
                brew install upx
                upx --version
                echo "UPX_PATH=/usr/local/bin/upx" >> $GITHUB_ENV
            else
                echo "Unknown OS, did the matrix changed ?" 2>&1
            fi

      - name: Build with pyinstaller
        run: |
          ls pellipop # Debug purposes

          pyinstaller pellipop/gui.py \
          --onefile \
          --name=pellipop-${{ env.OS }}-${{ needs.envs.outputs.ver }} \
          --hidden-import='PIL._tkinter_finder' \
          --windowed \
#          --hide-console hide-early # Weird things happen

        # One file -> a unique executable
        # pellipop-${{ env.OS }}-${{ needs.envs.outputs.ver }} -> Name of the executable
        # --hidden-import='PIL._tkinter_finder' -> PIL is used by ttkbootstrap
        # --windowed -> Removes the console (but sometimes not)
        # --hide-console hide-early -> Hides the console asap, except when launching from a terminal

        #- name: Fake build ## Debug
        #  run: |
        #  mkdir -p ./dist
        #  echo "Fake build for ${{ matrix.os }}" > ./dist/pellipop-${{ env.OS }}-${{ needs.envs.outputs.ver }}

      - name: Check build
        run: |
          ls ./dist # should contain pellipop-${{ env.OS }}-${{ needs.envs.outputs.ver }} (modulo the extension)
          file ./dist/pellipop* # should contain ELF 64-bit LSB executable, x86-64, version 1 (GNU/Linux), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 3.2.0, BuildID[sha1]=..., not stripped or Mach-O 64-bit executable x86_64 or PE32+ executable (console) x86-64, for MS Windows
          du -sh ./dist/pellipop* # Was around 150MB on v0.4.6 (M1 115MB)
      #   ${{ env.UPX_PATH }} ./dist/pellipop* # upx only available on Windows for now and should be done by pyinstaller
      #   du -sh ./dist/pellipop* # Check size after upx, see if it improves

      - name: Macos app # When building on macos, we have a .app "file", which is actually a folder so we need to archive it to put it in the artifact and then the release
        if : matrix.os == 'macos-latest' || matrix.os == 'macos-14'
        run: |
          tar -czvf ./dist/pellipop-${{ env.OS }}-${{ needs.envs.outputs.ver }}.tar.gz ./dist/pellipop-${{ env.OS }}-${{ needs.envs.outputs.ver }}.app        
          du -sh ./dist/pellipop-${{ env.OS }}-${{ needs.envs.outputs.ver }}.tar.gz  # Was around 150MB on v0.4.6 (M1 115MB)
          rm -rf ./dist/pellipop-${{ env.OS }}-${{ needs.envs.outputs.ver }}.app # Remove the .app folder to avoid having it in the artifact (shoudn't happen but just in case of an update of the action)

      - name: Deploy artifacts
        uses: actions/upload-artifact@v4
        with:
          name: pellipop-${{ env.OS }}-${{ needs.envs.outputs.ver }}
          path: ./dist/pellipop*
          if-no-files-found: error


  release:
    if: '!cancelled()'
    needs:
      - build
      - envs
      - delete-if-exists # Shouldn't release if delete-if-exists failed or still running
    name: Release binaries
    runs-on: ubuntu-latest
    steps:
      - name: Download binaries
        uses: actions/download-artifact@v4
        with:
          merge-multiple: true
          path: ./dist

      - name: Display structure of downloaded files
        run: |
          list=$(ls -R ./dist)
          echo $list
          if [[ $list -eq "" ]]; then
              echo "No files found in ./dist"
              exit 1
          fi

      - name: Write release text
        id: write_release
        run: |
            echo "Pellipop release for commit ${{ github.sha }}" > release.md
            echo "By @${{ github.actor }}" >> release.md
          
            if [[ "${{ needs.envs.outputs.tag }}" == "latest" ]]; then
                echo "Manually triggered release for the latest commit on branch ${{ needs.envs.outputs.ref }}" >> release.md
            else
                echo "Auto-generated release for the tag ${{ needs.envs.outputs.tag }}" >> release.md
                TAG_MESSAGE=${{ needs.envs.outputs.tag_message }}
                TAG_MESSAGE=$(echo $TAG_MESSAGE | base64 -d)
                echo "Tag message: $TAG_MESSAGE" >> release.md
            fi
            message=${{ needs.envs.outputs.message }}
            message=$(echo $message | base64 -d)
            echo "Commit message: \`$message\`" >> release.md
            echo "Commit date: ${{ needs.envs.outputs.date }}" >> release.md

      - name: Display release text
        run: cat release.md

      - name: Change user for release
        run: |
          user=${{ needs.envs.outputs.user }}
          user=$(echo $user | base64 -d)
          echo "User is $user"
          
          email=${{ needs.envs.outputs.email }}
          email=$(echo $email | base64 -d)
          echo "Email is $email"
          
          git config --global user.name "$user"
          git config --global user.email "$email"

      - name: release # TODO: Put user in release ?
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          name: ${{ needs.envs.outputs.ver }}
          tag_name: ${{ needs.envs.outputs.tag }}
          body_path: release.md
#          draft: ${{ needs.envs.outputs.tag == 'latest' }} # only draft prereleases
#          prerelease: ${{ needs.envs.outputs.tag == 'latest' }} # prerelease when no version in commit tag
          draft: ( 1 if ${{ needs.envs.outputs.tag == 'latest' }} else 0 )
          prerelease: ( 1 if ${{ needs.envs.outputs.tag == 'latest' }} else 0 )
          files: |
            ./dist/*
          target_commitish: ${{ github.sha }}
          fail_on_unmatched_files: true


